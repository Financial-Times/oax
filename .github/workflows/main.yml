name: Main

on: push

jobs:
  codestyle:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
        with:
          components: rustfmt
      - uses: actions/checkout@v1
      - run: cargo fmt --all -- --check

  # lint:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Rust
  #       uses: hecrj/setup-rust-action@v1
  #       with:
  #         components: clippy
  #     - uses: actions/checkout@v1
  #     - run: cargo clippy --all-targets --all-features -- -D clippy::all

  compile:
    runs-on: ubuntu-latest
    steps:
      - name: Set up Rust
        uses: hecrj/setup-rust-action@v1
      - uses: actions/checkout@master
      - run: cargo check --all

  test:
    # needs: [codestyle, lint, compile]
    needs: [codestyle, compile]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        rust: [stable, beta, nightly]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@v1
      with:
        rust-version: ${{ matrix.rust }}
    - uses: actions/setup-node@v1
      with:
        node-version: '10.x'
    - name: Checkout
      uses: actions/checkout@v1
    - name: Test
      run: cargo test --verbose

  release:
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest, macOS-latest, windows-latest]
        include:
          - os: ubuntu-latest
            rust: stable
            target: x86_64-unknown-linux-gnu
            bin: oax
            name: oax-linux64.tar.gz
            npm-name: oax-linux-64
          - os: macOS-latest
            rust: stable
            target: x86_64-apple-darwin
            bin: oax
            name: oax-osx.tar.gz
            npm-name: oax-darwin
          - os: windows-latest
            rust: stable
            target: x86_64-pc-windows-msvc
            bin: oax.exe
            name: oax-windows64.zip
            npm-name: oax-windows-64
    runs-on: ${{ matrix.os }}
    steps:
    - name: Setup Rust
      uses: hecrj/setup-rust-action@master
      with:
        rust-version: ${{ matrix.rust }}
    - name: Configure Rustup
      run: rustup target add ${{ matrix.target }}
    - name: Checkout
      uses: actions/checkout@v1
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    - name: Package
      shell: bash
      run: |
        strip target/${{ matrix.target }}/release/${{ matrix.bin }}
        cd target/${{ matrix.target }}/release
        if [[ "${{ matrix.os }}" == "windows-latest" ]]
        then
          7z a ../../../${{ matrix.name }} ${{ matrix.bin }}
        else
          tar czvf ../../../${{ matrix.name }} ${{ matrix.bin }}
        fi
        cd -
    - name: Publish to GitHub
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
          files: 'oax*'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - uses: actions/setup-node@v1
      with:
        node-version: '12.x'
        registry-url: 'https://registry.npmjs.org'
    - name: package sub-packages for npm
      shell: bash
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.bin }} npm/${{ matrix.npm-name }}/
        cd npm/${{ matrix.npm-name }}/
        ref='${{github.ref}}'
        npm version ${ref#refs/tags/}
        npm publish
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
    - name: Publish meta-package to npm
      shell: bash
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd npm/
        ref='${{github.ref}}'
        npm version ${ref#refs/tags/}
        if [[ "${{ matrix.os }}" == "windows-latest" ]] 
        then
          npx npm-check-updates -u
          npm update
          npm publish
        fi
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}